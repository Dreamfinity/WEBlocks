buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name = "sk89q"
        url = "http://maven.sk89q.com/repo/"
    }
    maven {
        name = "sponge"
        url = "http://repo.spongepowered.org/maven/"
    }
}

apply plugin: 'forge'
apply plugin: 'idea'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = config.version
group = config.group
//noinspection GroovyUnusedAssignment
archivesBaseName = config.archivesBaseName

sourceCompatibility = 1.8
targetCompatibility = 1.8

println "Current mod version: " + project.version + "!"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"

    replaceIn 'src/main/java/thecrafter4000/weblocks/WEBlocks.java'
    replace '@version@', config.version
    replace '@modid@', config.modid
    replace '@name@', config.name
}

dependencies {
    implementation 'com.forgeessentials:forgeessentials:1.4.6:dev'

    implementation fileTree('dir': 'libs', 'include': '*.jar')
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        filter ReplaceTokens, tokens: [version: config.version, modid: config.modid, name: config.name]
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
